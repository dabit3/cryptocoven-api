// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get approved(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ApprovalForAll extends ethereum.Event {
  get params(): ApprovalForAll__Params {
    return new ApprovalForAll__Params(this);
  }
}

export class ApprovalForAll__Params {
  _event: ApprovalForAll;

  constructor(event: ApprovalForAll) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get approved(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Token__royaltyInfoResult {
  value0: Address;
  value1: BigInt;

  constructor(value0: Address, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getReceiver(): Address {
    return this.value0;
  }

  getRoyaltyAmount(): BigInt {
    return this.value1;
  }
}

export class Token extends ethereum.SmartContract {
  static bind(address: Address): Token {
    return new Token("Token", address);
  }

  COMMUNITY_SALE_PRICE(): BigInt {
    let result = super.call(
      "COMMUNITY_SALE_PRICE",
      "COMMUNITY_SALE_PRICE():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_COMMUNITY_SALE_PRICE(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "COMMUNITY_SALE_PRICE",
      "COMMUNITY_SALE_PRICE():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  MAX_WITCHES_PER_WALLET(): BigInt {
    let result = super.call(
      "MAX_WITCHES_PER_WALLET",
      "MAX_WITCHES_PER_WALLET():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_MAX_WITCHES_PER_WALLET(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "MAX_WITCHES_PER_WALLET",
      "MAX_WITCHES_PER_WALLET():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  PUBLIC_SALE_PRICE(): BigInt {
    let result = super.call(
      "PUBLIC_SALE_PRICE",
      "PUBLIC_SALE_PRICE():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_PUBLIC_SALE_PRICE(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "PUBLIC_SALE_PRICE",
      "PUBLIC_SALE_PRICE():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceOf(owner: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  claimListMerkleRoot(): Bytes {
    let result = super.call(
      "claimListMerkleRoot",
      "claimListMerkleRoot():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_claimListMerkleRoot(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "claimListMerkleRoot",
      "claimListMerkleRoot():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  claimed(param0: Address): boolean {
    let result = super.call("claimed", "claimed(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBoolean();
  }

  try_claimed(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("claimed", "claimed(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  communityMintCounts(param0: Address): BigInt {
    let result = super.call(
      "communityMintCounts",
      "communityMintCounts(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_communityMintCounts(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "communityMintCounts",
      "communityMintCounts(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  communitySaleMerkleRoot(): Bytes {
    let result = super.call(
      "communitySaleMerkleRoot",
      "communitySaleMerkleRoot():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_communitySaleMerkleRoot(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "communitySaleMerkleRoot",
      "communitySaleMerkleRoot():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getApproved(tokenId: BigInt): Address {
    let result = super.call("getApproved", "getApproved(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_getApproved(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getApproved",
      "getApproved(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getBaseURI(): string {
    let result = super.call("getBaseURI", "getBaseURI():(string)", []);

    return result[0].toString();
  }

  try_getBaseURI(): ethereum.CallResult<string> {
    let result = super.tryCall("getBaseURI", "getBaseURI():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  getLastTokenId(): BigInt {
    let result = super.call("getLastTokenId", "getLastTokenId():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getLastTokenId(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getLastTokenId",
      "getLastTokenId():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  isApprovedForAll(owner: Address, operator: Address): boolean {
    let result = super.call(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );

    return result[0].toBoolean();
  }

  try_isApprovedForAll(
    owner: Address,
    operator: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isCommunitySaleActive(): boolean {
    let result = super.call(
      "isCommunitySaleActive",
      "isCommunitySaleActive():(bool)",
      []
    );

    return result[0].toBoolean();
  }

  try_isCommunitySaleActive(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isCommunitySaleActive",
      "isCommunitySaleActive():(bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isPublicSaleActive(): boolean {
    let result = super.call(
      "isPublicSaleActive",
      "isPublicSaleActive():(bool)",
      []
    );

    return result[0].toBoolean();
  }

  try_isPublicSaleActive(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isPublicSaleActive",
      "isPublicSaleActive():(bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  maxCommunitySaleWitches(): BigInt {
    let result = super.call(
      "maxCommunitySaleWitches",
      "maxCommunitySaleWitches():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_maxCommunitySaleWitches(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "maxCommunitySaleWitches",
      "maxCommunitySaleWitches():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  maxGiftedWitches(): BigInt {
    let result = super.call(
      "maxGiftedWitches",
      "maxGiftedWitches():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_maxGiftedWitches(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "maxGiftedWitches",
      "maxGiftedWitches():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  maxWitches(): BigInt {
    let result = super.call("maxWitches", "maxWitches():(uint256)", []);

    return result[0].toBigInt();
  }

  try_maxWitches(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("maxWitches", "maxWitches():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  numGiftedWitches(): BigInt {
    let result = super.call(
      "numGiftedWitches",
      "numGiftedWitches():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_numGiftedWitches(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "numGiftedWitches",
      "numGiftedWitches():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  ownerOf(tokenId: BigInt): Address {
    let result = super.call("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_ownerOf(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  royaltyInfo(tokenId: BigInt, salePrice: BigInt): Token__royaltyInfoResult {
    let result = super.call(
      "royaltyInfo",
      "royaltyInfo(uint256,uint256):(address,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromUnsignedBigInt(salePrice)
      ]
    );

    return new Token__royaltyInfoResult(
      result[0].toAddress(),
      result[1].toBigInt()
    );
  }

  try_royaltyInfo(
    tokenId: BigInt,
    salePrice: BigInt
  ): ethereum.CallResult<Token__royaltyInfoResult> {
    let result = super.tryCall(
      "royaltyInfo",
      "royaltyInfo(uint256,uint256):(address,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromUnsignedBigInt(salePrice)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Token__royaltyInfoResult(value[0].toAddress(), value[1].toBigInt())
    );
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  tokenURI(tokenId: BigInt): string {
    let result = super.call("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toString();
  }

  try_tokenURI(tokenId: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  verificationHash(): string {
    let result = super.call(
      "verificationHash",
      "verificationHash():(string)",
      []
    );

    return result[0].toString();
  }

  try_verificationHash(): ethereum.CallResult<string> {
    let result = super.tryCall(
      "verificationHash",
      "verificationHash():(string)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _openSeaProxyRegistryAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _maxWitches(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _maxCommunitySaleWitches(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _maxGiftedWitches(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }
}

export class ClaimCall extends ethereum.Call {
  get inputs(): ClaimCall__Inputs {
    return new ClaimCall__Inputs(this);
  }

  get outputs(): ClaimCall__Outputs {
    return new ClaimCall__Outputs(this);
  }
}

export class ClaimCall__Inputs {
  _call: ClaimCall;

  constructor(call: ClaimCall) {
    this._call = call;
  }

  get merkleProof(): Array<Bytes> {
    return this._call.inputValues[0].value.toBytesArray();
  }
}

export class ClaimCall__Outputs {
  _call: ClaimCall;

  constructor(call: ClaimCall) {
    this._call = call;
  }
}

export class GiftWitchesCall extends ethereum.Call {
  get inputs(): GiftWitchesCall__Inputs {
    return new GiftWitchesCall__Inputs(this);
  }

  get outputs(): GiftWitchesCall__Outputs {
    return new GiftWitchesCall__Outputs(this);
  }
}

export class GiftWitchesCall__Inputs {
  _call: GiftWitchesCall;

  constructor(call: GiftWitchesCall) {
    this._call = call;
  }

  get addresses(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }
}

export class GiftWitchesCall__Outputs {
  _call: GiftWitchesCall;

  constructor(call: GiftWitchesCall) {
    this._call = call;
  }
}

export class MintCall extends ethereum.Call {
  get inputs(): MintCall__Inputs {
    return new MintCall__Inputs(this);
  }

  get outputs(): MintCall__Outputs {
    return new MintCall__Outputs(this);
  }
}

export class MintCall__Inputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }

  get numberOfTokens(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class MintCall__Outputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }
}

export class MintCommunitySaleCall extends ethereum.Call {
  get inputs(): MintCommunitySaleCall__Inputs {
    return new MintCommunitySaleCall__Inputs(this);
  }

  get outputs(): MintCommunitySaleCall__Outputs {
    return new MintCommunitySaleCall__Outputs(this);
  }
}

export class MintCommunitySaleCall__Inputs {
  _call: MintCommunitySaleCall;

  constructor(call: MintCommunitySaleCall) {
    this._call = call;
  }

  get numberOfTokens(): i32 {
    return this._call.inputValues[0].value.toI32();
  }

  get merkleProof(): Array<Bytes> {
    return this._call.inputValues[1].value.toBytesArray();
  }
}

export class MintCommunitySaleCall__Outputs {
  _call: MintCommunitySaleCall;

  constructor(call: MintCommunitySaleCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class ReserveForGiftingCall extends ethereum.Call {
  get inputs(): ReserveForGiftingCall__Inputs {
    return new ReserveForGiftingCall__Inputs(this);
  }

  get outputs(): ReserveForGiftingCall__Outputs {
    return new ReserveForGiftingCall__Outputs(this);
  }
}

export class ReserveForGiftingCall__Inputs {
  _call: ReserveForGiftingCall;

  constructor(call: ReserveForGiftingCall) {
    this._call = call;
  }

  get numToReserve(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ReserveForGiftingCall__Outputs {
  _call: ReserveForGiftingCall;

  constructor(call: ReserveForGiftingCall) {
    this._call = call;
  }
}

export class RollOverWitchesCall extends ethereum.Call {
  get inputs(): RollOverWitchesCall__Inputs {
    return new RollOverWitchesCall__Inputs(this);
  }

  get outputs(): RollOverWitchesCall__Outputs {
    return new RollOverWitchesCall__Outputs(this);
  }
}

export class RollOverWitchesCall__Inputs {
  _call: RollOverWitchesCall;

  constructor(call: RollOverWitchesCall) {
    this._call = call;
  }

  get addresses(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }
}

export class RollOverWitchesCall__Outputs {
  _call: RollOverWitchesCall;

  constructor(call: RollOverWitchesCall) {
    this._call = call;
  }
}

export class SafeTransferFromCall extends ethereum.Call {
  get inputs(): SafeTransferFromCall__Inputs {
    return new SafeTransferFromCall__Inputs(this);
  }

  get outputs(): SafeTransferFromCall__Outputs {
    return new SafeTransferFromCall__Outputs(this);
  }
}

export class SafeTransferFromCall__Inputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SafeTransferFromCall__Outputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }
}

export class SafeTransferFrom1Call extends ethereum.Call {
  get inputs(): SafeTransferFrom1Call__Inputs {
    return new SafeTransferFrom1Call__Inputs(this);
  }

  get outputs(): SafeTransferFrom1Call__Outputs {
    return new SafeTransferFrom1Call__Outputs(this);
  }
}

export class SafeTransferFrom1Call__Inputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class SafeTransferFrom1Call__Outputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }
}

export class SetApprovalForAllCall extends ethereum.Call {
  get inputs(): SetApprovalForAllCall__Inputs {
    return new SetApprovalForAllCall__Inputs(this);
  }

  get outputs(): SetApprovalForAllCall__Outputs {
    return new SetApprovalForAllCall__Outputs(this);
  }
}

export class SetApprovalForAllCall__Inputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get approved(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetApprovalForAllCall__Outputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }
}

export class SetBaseURICall extends ethereum.Call {
  get inputs(): SetBaseURICall__Inputs {
    return new SetBaseURICall__Inputs(this);
  }

  get outputs(): SetBaseURICall__Outputs {
    return new SetBaseURICall__Outputs(this);
  }
}

export class SetBaseURICall__Inputs {
  _call: SetBaseURICall;

  constructor(call: SetBaseURICall) {
    this._call = call;
  }

  get _baseURI(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class SetBaseURICall__Outputs {
  _call: SetBaseURICall;

  constructor(call: SetBaseURICall) {
    this._call = call;
  }
}

export class SetClaimListMerkleRootCall extends ethereum.Call {
  get inputs(): SetClaimListMerkleRootCall__Inputs {
    return new SetClaimListMerkleRootCall__Inputs(this);
  }

  get outputs(): SetClaimListMerkleRootCall__Outputs {
    return new SetClaimListMerkleRootCall__Outputs(this);
  }
}

export class SetClaimListMerkleRootCall__Inputs {
  _call: SetClaimListMerkleRootCall;

  constructor(call: SetClaimListMerkleRootCall) {
    this._call = call;
  }

  get merkleRoot(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class SetClaimListMerkleRootCall__Outputs {
  _call: SetClaimListMerkleRootCall;

  constructor(call: SetClaimListMerkleRootCall) {
    this._call = call;
  }
}

export class SetCommunityListMerkleRootCall extends ethereum.Call {
  get inputs(): SetCommunityListMerkleRootCall__Inputs {
    return new SetCommunityListMerkleRootCall__Inputs(this);
  }

  get outputs(): SetCommunityListMerkleRootCall__Outputs {
    return new SetCommunityListMerkleRootCall__Outputs(this);
  }
}

export class SetCommunityListMerkleRootCall__Inputs {
  _call: SetCommunityListMerkleRootCall;

  constructor(call: SetCommunityListMerkleRootCall) {
    this._call = call;
  }

  get merkleRoot(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class SetCommunityListMerkleRootCall__Outputs {
  _call: SetCommunityListMerkleRootCall;

  constructor(call: SetCommunityListMerkleRootCall) {
    this._call = call;
  }
}

export class SetIsCommunitySaleActiveCall extends ethereum.Call {
  get inputs(): SetIsCommunitySaleActiveCall__Inputs {
    return new SetIsCommunitySaleActiveCall__Inputs(this);
  }

  get outputs(): SetIsCommunitySaleActiveCall__Outputs {
    return new SetIsCommunitySaleActiveCall__Outputs(this);
  }
}

export class SetIsCommunitySaleActiveCall__Inputs {
  _call: SetIsCommunitySaleActiveCall;

  constructor(call: SetIsCommunitySaleActiveCall) {
    this._call = call;
  }

  get _isCommunitySaleActive(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }
}

export class SetIsCommunitySaleActiveCall__Outputs {
  _call: SetIsCommunitySaleActiveCall;

  constructor(call: SetIsCommunitySaleActiveCall) {
    this._call = call;
  }
}

export class SetIsOpenSeaProxyActiveCall extends ethereum.Call {
  get inputs(): SetIsOpenSeaProxyActiveCall__Inputs {
    return new SetIsOpenSeaProxyActiveCall__Inputs(this);
  }

  get outputs(): SetIsOpenSeaProxyActiveCall__Outputs {
    return new SetIsOpenSeaProxyActiveCall__Outputs(this);
  }
}

export class SetIsOpenSeaProxyActiveCall__Inputs {
  _call: SetIsOpenSeaProxyActiveCall;

  constructor(call: SetIsOpenSeaProxyActiveCall) {
    this._call = call;
  }

  get _isOpenSeaProxyActive(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }
}

export class SetIsOpenSeaProxyActiveCall__Outputs {
  _call: SetIsOpenSeaProxyActiveCall;

  constructor(call: SetIsOpenSeaProxyActiveCall) {
    this._call = call;
  }
}

export class SetIsPublicSaleActiveCall extends ethereum.Call {
  get inputs(): SetIsPublicSaleActiveCall__Inputs {
    return new SetIsPublicSaleActiveCall__Inputs(this);
  }

  get outputs(): SetIsPublicSaleActiveCall__Outputs {
    return new SetIsPublicSaleActiveCall__Outputs(this);
  }
}

export class SetIsPublicSaleActiveCall__Inputs {
  _call: SetIsPublicSaleActiveCall;

  constructor(call: SetIsPublicSaleActiveCall) {
    this._call = call;
  }

  get _isPublicSaleActive(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }
}

export class SetIsPublicSaleActiveCall__Outputs {
  _call: SetIsPublicSaleActiveCall;

  constructor(call: SetIsPublicSaleActiveCall) {
    this._call = call;
  }
}

export class SetVerificationHashCall extends ethereum.Call {
  get inputs(): SetVerificationHashCall__Inputs {
    return new SetVerificationHashCall__Inputs(this);
  }

  get outputs(): SetVerificationHashCall__Outputs {
    return new SetVerificationHashCall__Outputs(this);
  }
}

export class SetVerificationHashCall__Inputs {
  _call: SetVerificationHashCall;

  constructor(call: SetVerificationHashCall) {
    this._call = call;
  }

  get _verificationHash(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class SetVerificationHashCall__Outputs {
  _call: SetVerificationHashCall;

  constructor(call: SetVerificationHashCall) {
    this._call = call;
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}

export class WithdrawTokensCall extends ethereum.Call {
  get inputs(): WithdrawTokensCall__Inputs {
    return new WithdrawTokensCall__Inputs(this);
  }

  get outputs(): WithdrawTokensCall__Outputs {
    return new WithdrawTokensCall__Outputs(this);
  }
}

export class WithdrawTokensCall__Inputs {
  _call: WithdrawTokensCall;

  constructor(call: WithdrawTokensCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class WithdrawTokensCall__Outputs {
  _call: WithdrawTokensCall;

  constructor(call: WithdrawTokensCall) {
    this._call = call;
  }
}
